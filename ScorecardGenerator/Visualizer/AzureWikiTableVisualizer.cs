using System.Diagnostics;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using ScorecardGenerator.Calculation;
using ScorecardGenerator.Checks;
using Serilog;

namespace ScorecardGenerator.Visualizer;

public class AzureWikiTableVisualizer : IVisualizer
{
    private readonly ILogger _logger;
    private readonly string _outputPath;
    private readonly string _dayOfGeneration;
    private const string QuestionMark = "<sup>&nbsp;<b><i><u>?</u></i></b></sup>";
    private const string AutoGenerationInfo = "<!-- !!! THIS FILE IS AUTOGENERATED - DO NOT EDIT IT MANUALLY !!! -->";
    private static readonly string AutoGenerationHeader = $"{AutoGenerationInfo}{Environment.NewLine}{AutoGenerationInfo}{Environment.NewLine}{AutoGenerationInfo}{Environment.NewLine}{Environment.NewLine}";
    private const string FileName = "Service-Scorecard";

    public AzureWikiTableVisualizer(ILogger logger, string outputPath)
    {
        _logger = logger.ForContext<AzureWikiTableVisualizer>();
        _outputPath = outputPath;
        _dayOfGeneration = $"{DateTime.Now:yyyy-MM-dd}";
    }
    
    public void Visualize(RunInfo runInfo)
    {
        CreateDirectoryForDay();
        GenerateCheckPages(runInfo);
        GenerateServiceOverview(runInfo);
    }

    private void CreateDirectoryForDay()
    {
        if (!Directory.Exists(Path.Join(_outputPath, FileName)))
        {
            Directory.CreateDirectory(Path.Join(_outputPath, FileName));
        }
    }
    
    private void WriteGeneratedOutput(string path, string content)
    {
        File.WriteAllText(Path.Join(_outputPath, path), $"{AutoGenerationHeader}{content}");
    }

    private void GenerateCheckPages(RunInfo runInfo)
    {
        foreach (var (checkName, infoPageContent) in runInfo.Checks.Values.SelectMany(checks => checks))
        {
            WriteGeneratedOutput($"{FileName}/{checkName}.md", infoPageContent);
        }
    }

    private RunInfo? Get7DaysAgo()
    {
        var path = Path.Join(_outputPath, $"{FileName}.md");
        var sevenDaysAgo = DateTime.Now.Subtract(TimeSpan.FromDays(7));
        var commits = Process.Start(new ProcessStartInfo
        {
            FileName = "git",
            Arguments = "log -n 100 --format=format:\"%h %ai\" --date=iso",
            UseShellExecute = false,
            RedirectStandardOutput = true,
            CreateNoWindow = true,
            WorkingDirectory = _outputPath
        })?.StandardOutput.ReadToEnd().Trim();
        if (string.IsNullOrEmpty(commits))
        {
            return null;
        }

        var cd = Directory.GetCurrentDirectory();
        Directory.SetCurrentDirectory(_outputPath);
        var sortedCommits = commits.Split(Environment.NewLine).Select(e =>
        {
            var list = e.Split(" ");
            return (DateTime.Parse(string.Join(" ", list.Skip(1))), list.First());
        }).OrderBy(a=>
        {
            Console.WriteLine(Math.Abs((a.Item1 - sevenDaysAgo).TotalSeconds));
            return Math.Abs((a.Item1 - sevenDaysAgo).TotalSeconds);
        });
            
        var commitToUse = sortedCommits.First();
            
        var arguments = $"show {commitToUse.Item2}:{Path.GetFileName(path)} ";
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "git",
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true,
                    WorkingDirectory = _outputPath
                }
            };
            process.Start();
            process.WaitForExit();
            var a = process.StandardOutput.ReadToEnd();
            var b = 3;
        }
        Directory.SetCurrentDirectory(cd);
        var sevenDaysAgoContent = File.ReadAllText(path);
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "git",
                    Arguments = "checkout master",
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true,
                    WorkingDirectory = _outputPath
                }
            };
            process.Start();
            process.WaitForExit();
        }
        /* match content between <!-- and --> via regex */
        var lastLineOfFile = sevenDaysAgoContent.Split(Environment.NewLine).Last();
        var regex = new Regex(@"<!--(.*?)-->", RegexOptions.Singleline);
        var match = regex.Match(lastLineOfFile);
        if (!match.Success)
        {
            return null;
        }
        var content = match.Groups[1].Value;
        return JsonConvert.DeserializeObject<RunInfo>(content)!;
    }

    private void GenerateServiceOverview(RunInfo runInfo)
    {
        var infoFromSevenDaysAgo = Get7DaysAgo();

        var usageGuide = $"Information on how to reach 100 points for each check can be found in the child pages:{Environment.NewLine}[[_TOSP_]]{Environment.NewLine}{Environment.NewLine}# Hover over cells for details";

        var lastUpdatedAt = DateTime.Now;
        
        const string headerElement = "th";
        const string columnElement = "td";
        var alternateColorIndex = 1;
        string ToBackgroundColor()
        {
            ++alternateColorIndex;

            if (alternateColorIndex % 2 == 0)
            {
                return "background-color: rgba(0, 0, 0, 0.05);";
            }

            return "";
        }

        string StyleForElement(int colorIndex, string element)
        {
            var style = "";
            if (colorIndex <= 3)
            {
                style += "background-color: rgba(var(--palette-neutral-2),1);";
            }

            return $"style=\"{style}\"";
        }
        string ToElement(string element, IEnumerable<TableContent> columns)
        {
            return $"<tr style=\"{ToBackgroundColor()}\">{string.Join("", columns.Select(entry => $"<{element} title=\"{entry.title}\" {StyleForElement(alternateColorIndex, element)} colspan=\"{entry.Colspan}\">{entry.Content}</{element}>"))}</tr>";
        }

        var runInfoJSON = JsonConvert.SerializeObject(runInfo);
        
        var headers = ToElement(headerElement, runInfo.Checks.Values.SelectMany(checksInGroup=>checksInGroup).Select(check => new TableContent(check.Name, "")).Prepend("ServiceName").Append("Average"));
        var groupData = ToElement(headerElement, runInfo.Checks.Where(group => group.Value.Any()).Select(group=>new TableContent(group.Key, "", group.Value.Count)).Prepend("   ").Append("   "));
        
        var output = runInfo.ServiceScores.Select(pair =>
        {
            var (fullPathToService, (scoreByCheckName, average)) = pair;
            var serviceName = $"<span>{Path.GetFileNameWithoutExtension(fullPathToService)}{QuestionMark}</span>";
            return ToElement(columnElement, scoreByCheckName.Select(check => FormatJustifiedScore(check.Value, infoFromSevenDaysAgo?.ServiceScores[fullPathToService].DeductionsByCheck[check.Key])).Prepend(new TableContent(serviceName, fullPathToService)).Append(ColorizeAverageScore(average)));
        });
        
        _logger.Information("Generated scorecard at {LastUpdatedAt}", lastUpdatedAt);

        var headline = $"# Service Scorecard for {_dayOfGeneration}";
        WriteGeneratedOutput($"{FileName}.md", $"{headline}{Environment.NewLine}{Environment.NewLine}{usageGuide}{Environment.NewLine}{Environment.NewLine}<table>{string.Join(Environment.NewLine, output.Prepend(headers).Prepend(groupData).Prepend(""))}</table>{Environment.NewLine}{Environment.NewLine}<!-- {runInfoJSON} -->");
    }

    private static string StyleOfNumber(int? score)
    {
        return $"color:{score switch
        {
            null => "var(--status-info-foreground)",
            >= 90 => "rgba(var(--palette-accent2),1)",
            >= 80 => "rgba(var(--palette-accent3),1)",
            >= 70 => "var(--status-warning-icon-foreground)",
            _ => "rgba(var(--palette-accent1),1)"
        }}";
    }

    private static string ColorizeAverageScore(int score)
    {
        return $"<span title style=\"{StyleOfNumber(score)}\">{score}</span>";
    }

    private static TableContent FormatJustifiedScore(IList<BaseCheck.Deduction> checkValue, IList<BaseCheck.Deduction>? sevenDaysAgo)
    {
        var finalScore = checkValue.CalculateFinalScore();
        var finalScoreSevenDaysAgo = sevenDaysAgo?.CalculateFinalScore();
        var delta = finalScore - finalScoreSevenDaysAgo;
        var deltaString = delta switch
        {
            null => "",
            0 => "<sub><span title=\"compared to 7 days ago\" style=\"color: var(--status-info-foreground))\"> ➡0%<span></sub>",
            > 0 => $"<sub><span title=\"compared to 7 days ago\" style=\"color: rgba(var(--palette-accent2),1)\"> ↗+{delta}%</span></sub>",
            < 0 => $"<sub><span title=\"compared to 7 days ago\" style=\"color: rgba(var(--palette-accent1),1)\"> ↘{delta}%</span></sub>"
        };
        
        var justifications = string.Join("&#10;", checkValue.Select(deduction => deduction.ToString()));
        return new TableContent($"<span style=\"{StyleOfNumber(finalScore)}\">{(finalScore == null ? "n/a" : finalScore)}{deltaString}</span>", justifications);
    }

    private record TableContent(string Content, string title, int Colspan = 1)
    { 
        public static implicit operator TableContent(string content) => new(content, "");
    }
}