using System.Diagnostics;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using ScorecardGenerator.Calculation;
using ScorecardGenerator.Checks;
using Serilog;

namespace ScorecardGenerator.Visualizer;

public class AzureWikiTableVisualizer : IVisualizer
{
    private readonly ILogger _logger;
    private readonly string _outputPath;
    private readonly string _dayOfGeneration;
    private const string QUESTION_MARK = "<sup>&nbsp;<b><i><u>?</u></i></b></sup>";
    private const string AUTO_GENERATION_INFO = "<!-- !!! THIS FILE IS AUTOGENERATED - DO NOT EDIT IT MANUALLY !!! -->";
    private static readonly string AutoGenerationHeader = $"{AUTO_GENERATION_INFO}{Environment.NewLine}{AUTO_GENERATION_INFO}{Environment.NewLine}{AUTO_GENERATION_INFO}{Environment.NewLine}{Environment.NewLine}";
    private const string FILE_NAME = "Service-Scorecard";

    public AzureWikiTableVisualizer(ILogger logger, string outputPath)
    {
        _logger = logger.ForContext<AzureWikiTableVisualizer>();
        _outputPath = outputPath;
        _dayOfGeneration = $"{DateTime.Now:yyyy-MM-dd}";
    }
    
    public void Visualize(RunInfo runInfo)
    {
        CreateDirectoryForDay();
        GenerateCheckPages(runInfo);
        GenerateServiceOverview(runInfo);
    }

    private void CreateDirectoryForDay()
    {
        if (!Directory.Exists(Path.Join(_outputPath, FILE_NAME)))
        {
            Directory.CreateDirectory(Path.Join(_outputPath, FILE_NAME));
        }
    }
    
    private void WriteGeneratedOutput(string path, string content)
    {
        File.WriteAllText(Path.Join(_outputPath, path), $"{AutoGenerationHeader}{content}");
    }

    private void GenerateCheckPages(RunInfo runInfo)
    {
        foreach (var (checkName, infoPageContent) in runInfo.Checks.Values.SelectMany(checks => checks))
        {
            WriteGeneratedOutput($"{FILE_NAME}/{checkName}.md", infoPageContent);
        }
    }

    private RunInfo? Get7DaysAgo()
    {
        var path = Path.Join(_outputPath, $"{FILE_NAME}.md");
        var sevenDaysAgo = DateTime.Now.Subtract(TimeSpan.FromDays(7));
        
        var gitLog = Process.Start(new ProcessStartInfo
        {
            FileName = "git",
            Arguments = "log -n 1000 --format=format:\"%h %ai\" --date=iso",
            UseShellExecute = false,
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            CreateNoWindow = true,
            WorkingDirectory = _outputPath
        });
        var commits = gitLog?.StandardOutput.ReadToEnd().Trim();
        _logger.Information("git log stdout: {StdOut}", commits);
        _logger.Information("git log stderr: {StdErr}", gitLog?.StandardError.ReadToEnd().Trim());
        if (string.IsNullOrEmpty(commits))
        {
            _logger.Information("No commits found skipping git diff");
            return null;
        }

        var sortedCommits = commits
            .Replace("\r", Environment.NewLine)
            .Replace("\n", Environment.NewLine)
            .Split(Environment.NewLine)
            .Where(line=>!string.IsNullOrEmpty(line))
            .Select(line =>
            {
                var list = line.Split(" ");
                return (DateTime.Parse(string.Join(" ", list.Skip(1))), list.First());
            })
            .OrderBy(dateAndHash=>
            {
                var (commitDate, _) = dateAndHash;
                return Math.Abs((commitDate - sevenDaysAgo).TotalSeconds);
            });
            
        var commitToUse = sortedCommits.First();
        
        _logger.Information("Diffing with commit: {Commit}", commitToUse);
            
        var arguments = $"show {commitToUse.Item2}:./{Path.GetFileName(path)} ";
        _logger.Information("running: git {Arguments}", arguments);
        var sevenDaysAgoContent = "";
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "git",
                    Arguments = arguments,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true,
                    WorkingDirectory = _outputPath
                }
            };
            process.Start();
            process.WaitForExitAsync().ConfigureAwait(false).GetAwaiter();
            sevenDaysAgoContent = process.StandardOutput.ReadToEnd();
        }

        if (string.IsNullOrEmpty(sevenDaysAgoContent))
        {
            _logger.Information("No history available in that commit; skipping diff");
            return null;
        }
        
        _logger.Information("sevenDaysAgoContent: {SevenDaysAgoContent}", sevenDaysAgoContent);

        var lastLineOfFile = sevenDaysAgoContent.Replace("\r", Environment.NewLine).Replace("\n", Environment.NewLine).Split(Environment.NewLine).Last(line => !string.IsNullOrEmpty(line));
        var regex = new Regex(@"<!--(.*?)-->", RegexOptions.Singleline);
        var match = regex.Match(lastLineOfFile);
        if (!match.Success)
        {
            _logger.Information("No last line matched; content: {Content}", sevenDaysAgoContent);
            return null;
        }
        var content = match.Groups[1].Value;
        return JsonConvert.DeserializeObject<RunInfo>(content)!;
    }

    private void GenerateServiceOverview(RunInfo runInfo)
    {
        var infoFromSevenDaysAgo = Get7DaysAgo();

        var usageGuide = $"Information on how to reach 100 points for each check can be found in the child pages:{Environment.NewLine}[[_TOSP_]]{Environment.NewLine}{Environment.NewLine}# Hover over cells for details";

        var lastUpdatedAt = DateTime.Now;
        
        const string HEADER_ELEMENT = "th";
        const string COLUMN_ELEMENT = "td";
        var alternateColorIndex = 1;
        string ToBackgroundColor()
        {
            ++alternateColorIndex;

            if (alternateColorIndex % 2 == 0)
            {
                return "background-color: rgba(0, 0, 0, 0.05);";
            }

            return "";
        }

        string StyleForElement(int colorIndex)
        {
            var style = "";
            if (colorIndex <= 3)
            {
                style += "background-color: rgba(var(--palette-neutral-2),1);";
            }

            return $"style=\"{style}\"";
        }
        string ToElement(string element, IEnumerable<TableContent> columns)
        {
            return $"<tr style=\"{ToBackgroundColor()}\">{string.Join("", columns.Select(entry => $"<{element} title=\"{entry.Title}\" {StyleForElement(alternateColorIndex)} colspan=\"{entry.Colspan}\">{entry.Content}</{element}>"))}</tr>";
        }

        var runInfoJSON = JsonConvert.SerializeObject(runInfo);
        
        var headers = ToElement(HEADER_ELEMENT, runInfo.Checks.Values.SelectMany(checksInGroup=>checksInGroup).Select(check => new TableContent(check.Name, "")).Prepend("ServiceName").Append("Average"));
        var groupData = ToElement(HEADER_ELEMENT, runInfo.Checks.Where(group => group.Value.Any()).Select(group=>new TableContent(group.Key, "", group.Value.Count)).Prepend("   ").Append("   "));
        
        var output = runInfo.ServiceScores.Select(pair =>
        {
            var (fullPathToService, (scoreByCheckName, average)) = pair;
            var serviceName = $"<span>{Path.GetFileNameWithoutExtension(fullPathToService)}{QUESTION_MARK}</span>";
            return ToElement(COLUMN_ELEMENT, scoreByCheckName.Select(check => FormatJustifiedScore(check.Value, GetDeductions(_logger, infoFromSevenDaysAgo, fullPathToService, check))).Prepend(new TableContent(serviceName, fullPathToService)).Append(ColorizeAverageScore(average)));
        });
        
        _logger.Information("Generated scorecard at {LastUpdatedAt}", lastUpdatedAt);

        var headline = $"# Service Scorecard for {_dayOfGeneration}";
        WriteGeneratedOutput($"{FILE_NAME}.md", $"{headline}{Environment.NewLine}{Environment.NewLine}{usageGuide}{Environment.NewLine}{Environment.NewLine}<table id=\"service-scorecard\">{string.Join(Environment.NewLine, output.Prepend(headers).Prepend(groupData).Prepend(""))}</table>{Environment.NewLine}{Environment.NewLine}<!-- {runInfoJSON} -->");
    }

    private static IList<BaseCheck.Deduction>? GetDeductions(ILogger logger, RunInfo? infoFromSevenDaysAgo, string fullPathToService, KeyValuePair<string, IList<BaseCheck.Deduction>> check)
    {
        var serviceScores = infoFromSevenDaysAgo?.ServiceScores;
        if (serviceScores == null || !serviceScores.ContainsKey(fullPathToService))
        {
            logger.Information("No info from 7 days ago for {Service}", fullPathToService);
            return null;
        }

        var deductionsByCheck = infoFromSevenDaysAgo?.ServiceScores[fullPathToService].DeductionsByCheck;
        if (deductionsByCheck == null || !deductionsByCheck.ContainsKey(check.Key))
        {
            logger.Information("No info from 7 days ago for {Service} and {Check}", fullPathToService, check.Key);
            return null;
        }

        return deductionsByCheck[check.Key];
    }

    private static string StyleOfNumber(int? score)
    {
        return $"color:{score switch
        {
            null => "var(--status-info-foreground)",
            >= 90 => "rgba(var(--palette-accent2),1)",
            >= 80 => "rgba(var(--palette-accent3),1)",
            >= 70 => "var(--status-warning-icon-foreground)",
            _ => "rgba(var(--palette-accent1),1)"
        }}";
    }

    private static string ColorizeAverageScore(int score)
    {
        return $"<span title style=\"{StyleOfNumber(score)}\">{score}</span>";
    }

    private static TableContent FormatJustifiedScore(IList<BaseCheck.Deduction> checkValue, IList<BaseCheck.Deduction>? sevenDaysAgo)
    {
        var finalScore = checkValue.CalculateFinalScore();
        var finalScoreSevenDaysAgo = sevenDaysAgo?.CalculateFinalScore();
        var delta = finalScore - finalScoreSevenDaysAgo;
        var deltaString = delta switch
        {
            null => "",
            0 => "",
            > 0 => $"<sub><span title=\"compared to 7 days ago\" style=\"color: rgba(var(--palette-accent2),1)\"> ↑+{delta}%</span></sub>",
            < 0 => $"<sub><span title=\"compared to 7 days ago\" style=\"color: rgba(var(--palette-accent1),1)\"> ↓{delta}%</span></sub>"
        };
        
        var justifications = string.Join("&#10;", checkValue.Select(deduction => deduction.ToString()));
        return new TableContent($"<span style=\"{StyleOfNumber(finalScore)}\">{(finalScore == null ? "n/a" : finalScore)}{deltaString}</span>", justifications);
    }

    private record TableContent(string Content, string Title, int Colspan = 1)
    { 
        public static implicit operator TableContent(string content) => new(content, "");
    }
}